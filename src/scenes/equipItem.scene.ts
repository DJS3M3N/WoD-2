import { Markup, Scenes } from "telegraf";
import { IBotContext } from "../context/context.interface";
import { InventoryService } from "../services/inventory.service";
import { UserService } from "../services/user.service";
import { InlineKeyboardMarkup } from "telegraf/typings/core/types/typegram";
import { deleteMarkup } from "../lib/deleteMarkup";

export const equipItemScene = new Scenes.BaseScene<IBotContext>("equip_item");

equipItemScene.enter(async ctx => {
    console.log("inside equip item");

    let current_slot = "";
    let num = -1;

    if (!ctx.from) {
        return;
    }

    let tooltips = [];

    for (let slot of ["arms", "legs", "feet", "lefthand", "righthand", "head", "thorax"]) {
        tooltips.push((await InventoryService.getInventoryWithSlot(ctx.from.id, slot)).length);
    }

    equipItemScene.on("text", async ctx => {
        num = parseInt(ctx.message.text);
        const items = await InventoryService.getItemFromInventoryWithSlot(ctx.from.id, current_slot);
        const inventory = await InventoryService.getInventoryWithSlot(ctx.from.id, current_slot);

        if (num === 0) {
            deleteMarkup(ctx, ctx.chat.id, ctx.message.message_id - 1);
            UserService.removeItemFromSlot(ctx.from.id, current_slot);
            ctx.reply("–í—ã —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ª–æ—Ç–∞: " + current_slot, Markup.inlineKeyboard([Markup.button.callback("–í–µ—Ä–Ω—É—Ç—å—Å—è", "back_to_equipment")]));
        } else if (num > 0 && num <= items.length) {
            deleteMarkup(ctx, ctx.chat.id, ctx.message.message_id - 1);
            UserService.putItemInSlot(ctx.from.id, inventory[num - 1].id, current_slot);
            ctx.reply("–í—ã —É—Å–ø–µ—à–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: " + items[num - 1].name + " –≤ —Å–ª–æ—Ç: " + current_slot,
                Markup.inlineKeyboard([Markup.button.callback("–í–µ—Ä–Ω—É—Ç—å—Å—è", "back_to_equipment")]));
        } else {
            ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ", Markup.inlineKeyboard([Markup.button.callback("–í–µ—Ä–Ω—É—Ç—å—Å—è", "back_to_equipment")]));
        }
    });

    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç, –ø—Ä–µ–¥–º–µ—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å: ", Markup.inlineKeyboard([
        [Markup.button.callback("ü™ñ –®–ª–µ–º (" + tooltips[5] + ")", "head")],
        [Markup.button.callback("ü§õüèº –õ–µ–≤–∞—è —Ä—É–∫–∞ (" + tooltips[3] + ")", "lefthand"),
        Markup.button.callback("üëî –ì—Ä—É–¥—å (" + tooltips[6] + ")", "thorax"),
        Markup.button.callback("ü§úüèº –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞ (" + tooltips[4] + ")", "righthand")],
        [Markup.button.callback("üß§ –ü–µ—Ä—á–∞—Ç–∫–∏ (" + tooltips[0] + ")", "arms"),
        Markup.button.callback("üëñ –®—Ç–∞–Ω—ã (" + tooltips[1] + ")", "legs"),
        Markup.button.callback("üëû –û–±—É–≤—å (" + tooltips[2] + ")", "feet")],
        [Markup.button.callback("–í–µ—Ä–Ω—É—Ç—å—Å—è", "back_to_equipment")]
    ]));



    equipItemScene.action("arms", async ctx => {
        ctx.editMessageReplyMarkup({ inline_keyboard: [] });
        current_slot = "arms";

        chooseItem(ctx, current_slot);
    });

    equipItemScene.action("legs", async ctx => {
        ctx.editMessageReplyMarkup({ inline_keyboard: [] });
        current_slot = "legs";

        chooseItem(ctx, current_slot);
    });

    equipItemScene.action("feet", async ctx => {
        ctx.editMessageReplyMarkup({ inline_keyboard: [] });
        current_slot = "feet";

        chooseItem(ctx, current_slot);
    });

    equipItemScene.action("lefthand", async ctx => {
        ctx.editMessageReplyMarkup({ inline_keyboard: [] });
        current_slot = "lefthand";

        chooseItem(ctx, current_slot);
    });

    equipItemScene.action("righthand", async ctx => {
        ctx.editMessageReplyMarkup({ inline_keyboard: [] });
        current_slot = "righthand";

        chooseItem(ctx, current_slot);
    });

    equipItemScene.action("head", async ctx => {
        ctx.editMessageReplyMarkup({ inline_keyboard: [] });
        current_slot = "head";

        chooseItem(ctx, current_slot);
    });

    equipItemScene.action("thorax", async ctx => {
        ctx.editMessageReplyMarkup({ inline_keyboard: [] });
        current_slot = "thorax";

        chooseItem(ctx, current_slot);
    });

    equipItemScene.action("back_to_equipment", ctx => {
        ctx.editMessageReplyMarkup({ inline_keyboard: [] });
        ctx.scene.leave()
        ctx.scene.enter("equipment");
    });

    equipItemScene.action("back_to_equip_item", ctx => {
        ctx.editMessageReplyMarkup({ inline_keyboard: [] });
        ctx.scene.leave()
        ctx.scene.enter("equip_item");
    });
});

async function chooseItem(ctx: any, current_slot: string) {
    const items = await InventoryService.getItemFromInventoryWithSlot(ctx.from.id, current_slot);

    ctx.replyWithHTML("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–¥–µ—Ç—å:\n"
        + items.map((item, index) => ("\n" + (index + 1) + ". <b>") + item.name + "</b> üëäüèº " + item.power).join("")
        + "\n\n–ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ª–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ 0",
        Markup.inlineKeyboard([Markup.button.callback("–í–µ—Ä–Ω—É—Ç—å—Å—è", "back_to_equip_item")]));
}